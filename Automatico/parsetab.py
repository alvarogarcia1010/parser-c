
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGMENT BLOCKCOMMENT BOOL BREAK CHAR COMMA DIVIDE DO ELSE EQUALS FALSE FLOAT FLOATNUMBER FOR GREATER GREATERTHAN IDENTIFIER IF IN INT INTNUMBER LBRACE LBRACKET LOWER LOWERTHAN LPAREN MINUS MOD NOT OR PLUS RBRACE RBRACKET RETURN RPAREN SEMMICOLON TIMES TRUE VOID WHILEprogram : declarationListdeclarationList : declarationList declaration \n \t\t\t\t\t\t\t\t\t\t\t| declaration declaration : varDeclaration \n \t\t\t\t\t\t\t\t\t| funDeclaration\n          \t\t\t\t| commentcomment : BLOCKCOMMENTvarDeclaration : typeSpecifier varDeclList SEMMICOLONvarDeclList : varDeclList COMMA varDecInitialize \n \t\t\t\t\t\t\t\t\t| varDecInitializevarDecInitialize : varDeclId \n\t\t\t\t\t\t\t\t\t\t\t| varDeclId ASSIGMENT simpleExpressionvarDeclId : IDENTIFIER varDeclId : IDENTIFIER LBRACKET INTNUMBER RBRACKETtypeSpecifier : INT \n \t\t\t\t| FLOAT \n     \t\t| CHAR \n\t\t\t\t| BOOL \n    \t\t| VOIDfunDeclaration : typeSpecifier IDENTIFIER LPAREN params RPAREN statementparams : paramList \n \t\t\t\t\t\t| emptyparamList : paramList SEMMICOLON paramTypeList \n \t\t\t\t\t\t\t\t| paramTypeListparamTypeList : typeSpecifier paramIdListparamIdList : paramIdList COMMA paramId\n\t\t\t| paramId paramId : IDENTIFIER paramId : IDENTIFIER LBRACKET RBRACKET compoundStmt : LBRACE localDeclarations statementList RBRACE localDeclarations : localDeclarations varDeclaration\n\t\t| empty statementList : statementList statement\n\t\t| empty  \n\t\t| commentstatement : expressionStmt\n\t\t| compoundStmt\n\t\t| selectionStmt\n\t\t| iterationStmt\n\t\t| returnStmt\n\t\t| breakStmt expressionStmt : expression SEMMICOLON        \n\t\t| SEMMICOLON selectionStmt : IF LPAREN expression RPAREN statementselectionStmt : IF LPAREN expression RPAREN statement ELSE statementiterationStmt : WHILE LPAREN expression RPAREN statementiterationStmt : FOR LPAREN IDENTIFIER IN IDENTIFIER RPAREN statementiterationStmt : DO statement WHILE LPAREN expression RPAREN statementreturnStmt : RETURN  SEMMICOLON\n\t\t\t| RETURN expression SEMMICOLONbreakStmt : BREAK SEMMICOLON expression : IDENTIFIER ASSIGMENT expression\n\t\t| IDENTIFIER PLUS ASSIGMENT expression\n\t\t| IDENTIFIER MINUS ASSIGMENT expression\n\t\t| simpleExpression var : IDENTIFIER\n\t\t| IDENTIFIER LBRACKET expression RBRACKET simpleExpression : simpleExpression OR orExpression \n\t\t| orExpressionorExpression : orExpression AND unaryRelExpression\n\t\t| unaryRelExpressionunaryRelExpression : NOT unaryRelExpression \n\t\t\t| relExpressionrelExpression : addExpression relop addExpression\n\t\t| addExpressionrelop : GREATERrelop : LOWERrelop : EQUALSrelop : GREATERTHANrelop : LOWERTHANaddExpression : addExpression addop term\n\t\t\t\t\t\t\t| termaddop : PLUSaddop : MINUSterm : term mulop unaryExpression\n\t\t\t\t\t| unaryExpressionmulop : TIMESmulop : DIVIDE mulop : MODunaryExpression : unaryExpression\n\t\t\t\t\t\t\t| factorfactor : LBRACKET expression RBRACKET\n\t\t\t\t\t\t\t| var\n\t\t\t\t\t\t\t| call\n\t\t\t\t\t\t\t| constantconstant : INTNUMBERconstant : FLOATNUMBERconstant : FALSEconstant : TRUE call : IDENTIFIER LBRACKET args RBRACKET args : argList\n\t\t\t\t\t| empty argList : argList COMMA expression\n\t\t\t\t\t\t\t| expression empty :'
    
_lr_action_items = {'BLOCKCOMMENT':([0,2,3,4,5,6,8,14,19,78,79,80,81,82,83,84,86,87,110,111,112,117,119,127,135,139,145,146,152,153,154,],[8,8,-3,-4,-5,-6,-7,-2,-8,-20,-36,-37,-38,-39,-40,-41,-43,-95,-42,8,-32,-49,-51,-31,-50,-30,-44,-46,-45,-47,-48,]),'INT':([0,2,3,4,5,6,8,14,19,21,54,78,79,80,81,82,83,84,86,87,110,111,112,117,119,127,135,139,145,146,152,153,154,],[9,9,-3,-4,-5,-6,-7,-2,-8,9,9,-20,-36,-37,-38,-39,-40,-41,-43,-95,-42,9,-32,-49,-51,-31,-50,-30,-44,-46,-45,-47,-48,]),'FLOAT':([0,2,3,4,5,6,8,14,19,21,54,78,79,80,81,82,83,84,86,87,110,111,112,117,119,127,135,139,145,146,152,153,154,],[10,10,-3,-4,-5,-6,-7,-2,-8,10,10,-20,-36,-37,-38,-39,-40,-41,-43,-95,-42,10,-32,-49,-51,-31,-50,-30,-44,-46,-45,-47,-48,]),'CHAR':([0,2,3,4,5,6,8,14,19,21,54,78,79,80,81,82,83,84,86,87,110,111,112,117,119,127,135,139,145,146,152,153,154,],[11,11,-3,-4,-5,-6,-7,-2,-8,11,11,-20,-36,-37,-38,-39,-40,-41,-43,-95,-42,11,-32,-49,-51,-31,-50,-30,-44,-46,-45,-47,-48,]),'BOOL':([0,2,3,4,5,6,8,14,19,21,54,78,79,80,81,82,83,84,86,87,110,111,112,117,119,127,135,139,145,146,152,153,154,],[12,12,-3,-4,-5,-6,-7,-2,-8,12,12,-20,-36,-37,-38,-39,-40,-41,-43,-95,-42,12,-32,-49,-51,-31,-50,-30,-44,-46,-45,-47,-48,]),'VOID':([0,2,3,4,5,6,8,14,19,21,54,78,79,80,81,82,83,84,86,87,110,111,112,117,119,127,135,139,145,146,152,153,154,],[13,13,-3,-4,-5,-6,-7,-2,-8,13,13,-20,-36,-37,-38,-39,-40,-41,-43,-95,-42,13,-32,-49,-51,-31,-50,-30,-44,-46,-45,-47,-48,]),'$end':([1,2,3,4,5,6,8,14,19,78,79,80,81,82,83,84,86,110,117,119,135,139,145,146,152,153,154,],[0,-1,-3,-4,-5,-6,-7,-2,-8,-20,-36,-37,-38,-39,-40,-41,-43,-42,-49,-51,-50,-30,-44,-46,-45,-47,-48,]),'IDENTIFIER':([7,8,9,10,11,12,13,19,20,23,26,35,41,53,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,82,83,84,86,87,91,92,101,110,111,112,113,114,115,117,119,121,122,125,126,127,128,129,130,135,139,140,141,142,143,144,145,146,149,150,151,152,153,154,],[16,-7,-15,-16,-17,-18,-19,-8,25,45,52,45,73,73,45,45,45,45,-66,-67,-68,-69,-70,-73,-74,45,-77,-78,-79,73,52,-36,-37,-38,-39,-40,-41,-43,-95,73,73,73,-42,-95,-32,73,73,133,-49,-51,73,73,73,73,-31,-34,-35,25,-50,-30,-33,73,73,147,73,-44,-46,73,73,73,-45,-47,-48,]),'RBRACE':([8,19,79,80,81,82,83,84,86,87,110,111,112,117,119,126,127,128,129,135,139,140,145,146,152,153,154,],[-7,-8,-36,-37,-38,-39,-40,-41,-43,-95,-42,-95,-32,-49,-51,139,-31,-34,-35,-50,-30,-33,-44,-46,-45,-47,-48,]),'SEMMICOLON':([8,15,16,17,18,19,24,25,28,30,32,33,34,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,55,58,73,74,79,80,81,82,83,84,85,86,87,91,92,93,94,95,96,97,98,99,100,108,109,110,111,112,117,118,119,120,123,124,126,127,128,129,135,136,137,139,140,141,142,145,146,149,150,151,152,153,154,],[-7,19,-13,-10,-11,-8,-9,-13,54,-24,-12,-59,-61,-63,-65,-72,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,-25,-27,-28,86,-14,-62,-56,-55,-36,-37,-38,-39,-40,-41,110,-43,-95,86,117,119,-23,-58,-60,-64,-71,-75,-82,-26,-29,-42,-95,-32,-49,135,-51,-52,-57,-90,86,-31,-34,-35,-50,-53,-54,-30,-33,86,86,-44,-46,86,86,86,-45,-47,-48,]),'LBRACE':([8,19,53,79,80,81,82,83,84,86,87,91,110,111,112,117,119,126,127,128,129,135,139,140,141,142,145,146,149,150,151,152,153,154,],[-7,-8,87,-36,-37,-38,-39,-40,-41,-43,-95,87,-42,-95,-32,-49,-51,87,-31,-34,-35,-50,-30,-33,87,87,-44,-46,87,87,87,-45,-47,-48,]),'IF':([8,19,53,79,80,81,82,83,84,86,87,91,110,111,112,117,119,126,127,128,129,135,139,140,141,142,145,146,149,150,151,152,153,154,],[-7,-8,88,-36,-37,-38,-39,-40,-41,-43,-95,88,-42,-95,-32,-49,-51,88,-31,-34,-35,-50,-30,-33,88,88,-44,-46,88,88,88,-45,-47,-48,]),'WHILE':([8,19,53,79,80,81,82,83,84,86,87,91,110,111,112,116,117,119,126,127,128,129,135,139,140,141,142,145,146,149,150,151,152,153,154,],[-7,-8,89,-36,-37,-38,-39,-40,-41,-43,-95,89,-42,-95,-32,134,-49,-51,89,-31,-34,-35,-50,-30,-33,89,89,-44,-46,89,89,89,-45,-47,-48,]),'FOR':([8,19,53,79,80,81,82,83,84,86,87,91,110,111,112,117,119,126,127,128,129,135,139,140,141,142,145,146,149,150,151,152,153,154,],[-7,-8,90,-36,-37,-38,-39,-40,-41,-43,-95,90,-42,-95,-32,-49,-51,90,-31,-34,-35,-50,-30,-33,90,90,-44,-46,90,90,90,-45,-47,-48,]),'DO':([8,19,53,79,80,81,82,83,84,86,87,91,110,111,112,117,119,126,127,128,129,135,139,140,141,142,145,146,149,150,151,152,153,154,],[-7,-8,91,-36,-37,-38,-39,-40,-41,-43,-95,91,-42,-95,-32,-49,-51,91,-31,-34,-35,-50,-30,-33,91,91,-44,-46,91,91,91,-45,-47,-48,]),'RETURN':([8,19,53,79,80,81,82,83,84,86,87,91,110,111,112,117,119,126,127,128,129,135,139,140,141,142,145,146,149,150,151,152,153,154,],[-7,-8,92,-36,-37,-38,-39,-40,-41,-43,-95,92,-42,-95,-32,-49,-51,92,-31,-34,-35,-50,-30,-33,92,92,-44,-46,92,92,92,-45,-47,-48,]),'BREAK':([8,19,53,79,80,81,82,83,84,86,87,91,110,111,112,117,119,126,127,128,129,135,139,140,141,142,145,146,149,150,151,152,153,154,],[-7,-8,93,-36,-37,-38,-39,-40,-41,-43,-95,93,-42,-95,-32,-49,-51,93,-31,-34,-35,-50,-30,-33,93,93,-44,-46,93,93,93,-45,-47,-48,]),'NOT':([8,19,23,35,41,53,56,57,75,79,80,81,82,83,84,86,87,91,92,101,110,111,112,113,114,117,119,121,122,125,126,127,128,129,135,139,140,141,142,144,145,146,149,150,151,152,153,154,],[-7,-8,35,35,35,35,35,35,35,-36,-37,-38,-39,-40,-41,-43,-95,35,35,35,-42,-95,-32,35,35,-49,-51,35,35,35,35,-31,-34,-35,-50,-30,-33,35,35,35,-44,-46,35,35,35,-45,-47,-48,]),'LBRACKET':([8,16,19,23,25,35,41,45,52,53,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,73,75,79,80,81,82,83,84,86,87,91,92,101,110,111,112,113,114,117,119,121,122,125,126,127,128,129,135,139,140,141,142,144,145,146,149,150,151,152,153,154,],[-7,22,-8,41,22,41,41,75,77,41,41,41,41,41,-66,-67,-68,-69,-70,-73,-74,41,-77,-78,-79,75,41,-36,-37,-38,-39,-40,-41,-43,-95,41,41,41,-42,-95,-32,41,41,-49,-51,41,41,41,41,-31,-34,-35,-50,-30,-33,41,41,41,-44,-46,41,41,41,-45,-47,-48,]),'INTNUMBER':([8,19,22,23,35,41,53,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,75,79,80,81,82,83,84,86,87,91,92,101,110,111,112,113,114,117,119,121,122,125,126,127,128,129,135,139,140,141,142,144,145,146,149,150,151,152,153,154,],[-7,-8,31,46,46,46,46,46,46,46,46,-66,-67,-68,-69,-70,-73,-74,46,-77,-78,-79,46,-36,-37,-38,-39,-40,-41,-43,-95,46,46,46,-42,-95,-32,46,46,-49,-51,46,46,46,46,-31,-34,-35,-50,-30,-33,46,46,46,-44,-46,46,46,46,-45,-47,-48,]),'FLOATNUMBER':([8,19,23,35,41,53,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,75,79,80,81,82,83,84,86,87,91,92,101,110,111,112,113,114,117,119,121,122,125,126,127,128,129,135,139,140,141,142,144,145,146,149,150,151,152,153,154,],[-7,-8,47,47,47,47,47,47,47,47,-66,-67,-68,-69,-70,-73,-74,47,-77,-78,-79,47,-36,-37,-38,-39,-40,-41,-43,-95,47,47,47,-42,-95,-32,47,47,-49,-51,47,47,47,47,-31,-34,-35,-50,-30,-33,47,47,47,-44,-46,47,47,47,-45,-47,-48,]),'FALSE':([8,19,23,35,41,53,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,75,79,80,81,82,83,84,86,87,91,92,101,110,111,112,113,114,117,119,121,122,125,126,127,128,129,135,139,140,141,142,144,145,146,149,150,151,152,153,154,],[-7,-8,48,48,48,48,48,48,48,48,-66,-67,-68,-69,-70,-73,-74,48,-77,-78,-79,48,-36,-37,-38,-39,-40,-41,-43,-95,48,48,48,-42,-95,-32,48,48,-49,-51,48,48,48,48,-31,-34,-35,-50,-30,-33,48,48,48,-44,-46,48,48,48,-45,-47,-48,]),'TRUE':([8,19,23,35,41,53,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,75,79,80,81,82,83,84,86,87,91,92,101,110,111,112,113,114,117,119,121,122,125,126,127,128,129,135,139,140,141,142,144,145,146,149,150,151,152,153,154,],[-7,-8,49,49,49,49,49,49,49,49,-66,-67,-68,-69,-70,-73,-74,49,-77,-78,-79,49,-36,-37,-38,-39,-40,-41,-43,-95,49,49,49,-42,-95,-32,49,49,-49,-51,49,49,49,49,-31,-34,-35,-50,-30,-33,49,49,49,-44,-46,49,49,49,-45,-47,-48,]),'COMMA':([15,16,17,18,24,25,32,33,34,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,55,58,73,74,95,96,97,98,99,100,104,106,108,109,120,123,124,136,137,138,],[20,-13,-10,-11,-9,-13,-12,-59,-61,-63,-65,-72,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,76,-27,-28,-14,-62,-56,-55,-58,-60,-64,-71,-75,-82,-94,125,-26,-29,-52,-57,-90,-53,-54,-93,]),'LPAREN':([16,88,89,90,134,],[21,113,114,115,144,]),'ASSIGMENT':([16,18,25,55,73,102,103,],[-13,23,-13,-14,101,121,122,]),'RPAREN':([21,27,28,29,30,33,34,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,58,73,74,94,95,96,97,98,99,100,108,109,120,123,124,131,132,136,137,147,148,],[-95,53,-21,-22,-24,-59,-61,-63,-65,-72,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,-25,-27,-28,-62,-56,-55,-23,-58,-60,-64,-71,-75,-82,-26,-29,-52,-57,-90,141,142,-53,-54,150,151,]),'RBRACKET':([31,33,34,36,37,38,39,40,42,43,44,45,46,47,48,49,58,72,73,74,75,77,95,96,97,98,99,100,104,105,106,107,120,123,124,136,137,138,],[55,-59,-61,-63,-65,-72,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,-62,100,-56,-55,-95,109,-58,-60,-64,-71,-75,-82,123,124,-91,-92,-52,-57,-90,-53,-54,-93,]),'OR':([32,33,34,36,37,38,39,40,42,43,44,45,46,47,48,49,58,73,74,95,96,97,98,99,100,123,124,],[56,-59,-61,-63,-65,-72,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,-62,-56,56,-58,-60,-64,-71,-75,-82,-57,-90,]),'AND':([33,34,36,37,38,39,40,42,43,44,45,46,47,48,49,58,73,95,96,97,98,99,100,123,124,],[57,-61,-63,-65,-72,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,-62,-56,57,-60,-64,-71,-75,-82,-57,-90,]),'GREATER':([37,38,39,40,42,43,44,45,46,47,48,49,73,98,99,100,123,124,],[61,-72,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,-56,-71,-75,-82,-57,-90,]),'LOWER':([37,38,39,40,42,43,44,45,46,47,48,49,73,98,99,100,123,124,],[62,-72,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,-56,-71,-75,-82,-57,-90,]),'EQUALS':([37,38,39,40,42,43,44,45,46,47,48,49,73,98,99,100,123,124,],[63,-72,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,-56,-71,-75,-82,-57,-90,]),'GREATERTHAN':([37,38,39,40,42,43,44,45,46,47,48,49,73,98,99,100,123,124,],[64,-72,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,-56,-71,-75,-82,-57,-90,]),'LOWERTHAN':([37,38,39,40,42,43,44,45,46,47,48,49,73,98,99,100,123,124,],[65,-72,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,-56,-71,-75,-82,-57,-90,]),'PLUS':([37,38,39,40,42,43,44,45,46,47,48,49,73,97,98,99,100,123,124,],[66,-72,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,102,66,-71,-75,-82,-57,-90,]),'MINUS':([37,38,39,40,42,43,44,45,46,47,48,49,73,97,98,99,100,123,124,],[67,-72,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,103,67,-71,-75,-82,-57,-90,]),'TIMES':([38,39,40,42,43,44,45,46,47,48,49,73,98,99,100,123,124,],[69,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,-56,69,-75,-82,-57,-90,]),'DIVIDE':([38,39,40,42,43,44,45,46,47,48,49,73,98,99,100,123,124,],[70,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,-56,70,-75,-82,-57,-90,]),'MOD':([38,39,40,42,43,44,45,46,47,48,49,73,98,99,100,123,124,],[71,-76,-81,-83,-84,-85,-56,-86,-87,-88,-89,-56,71,-75,-82,-57,-90,]),'ELSE':([79,80,81,82,83,84,86,110,117,119,135,139,145,146,152,153,154,],[-36,-37,-38,-39,-40,-41,-43,-42,-49,-51,-50,-30,149,-46,-45,-47,-48,]),'IN':([133,],[143,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarationList':([0,],[2,]),'declaration':([0,2,],[3,14,]),'varDeclaration':([0,2,111,],[4,4,127,]),'funDeclaration':([0,2,],[5,5,]),'comment':([0,2,111,],[6,6,129,]),'typeSpecifier':([0,2,21,54,111,],[7,7,26,26,130,]),'varDeclList':([7,130,],[15,15,]),'varDecInitialize':([7,20,130,],[17,24,17,]),'varDeclId':([7,20,130,],[18,18,18,]),'params':([21,],[27,]),'paramList':([21,],[28,]),'empty':([21,75,87,111,],[29,107,112,128,]),'paramTypeList':([21,54,],[30,94,]),'simpleExpression':([23,41,53,75,91,92,101,113,114,121,122,125,126,141,142,144,149,150,151,],[32,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'orExpression':([23,41,53,56,75,91,92,101,113,114,121,122,125,126,141,142,144,149,150,151,],[33,33,33,95,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'unaryRelExpression':([23,35,41,53,56,57,75,91,92,101,113,114,121,122,125,126,141,142,144,149,150,151,],[34,58,34,34,34,96,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'relExpression':([23,35,41,53,56,57,75,91,92,101,113,114,121,122,125,126,141,142,144,149,150,151,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'addExpression':([23,35,41,53,56,57,59,75,91,92,101,113,114,121,122,125,126,141,142,144,149,150,151,],[37,37,37,37,37,37,97,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'term':([23,35,41,53,56,57,59,60,75,91,92,101,113,114,121,122,125,126,141,142,144,149,150,151,],[38,38,38,38,38,38,38,98,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'unaryExpression':([23,35,41,53,56,57,59,60,68,75,91,92,101,113,114,121,122,125,126,141,142,144,149,150,151,],[39,39,39,39,39,39,39,39,99,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'factor':([23,35,41,53,56,57,59,60,68,75,91,92,101,113,114,121,122,125,126,141,142,144,149,150,151,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'var':([23,35,41,53,56,57,59,60,68,75,91,92,101,113,114,121,122,125,126,141,142,144,149,150,151,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'call':([23,35,41,53,56,57,59,60,68,75,91,92,101,113,114,121,122,125,126,141,142,144,149,150,151,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'constant':([23,35,41,53,56,57,59,60,68,75,91,92,101,113,114,121,122,125,126,141,142,144,149,150,151,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'paramIdList':([26,],[50,]),'paramId':([26,76,],[51,108,]),'relop':([37,],[59,]),'addop':([37,97,],[60,60,]),'mulop':([38,98,],[68,68,]),'expression':([41,53,75,91,92,101,113,114,121,122,125,126,141,142,144,149,150,151,],[72,85,104,85,118,120,131,132,136,137,138,85,85,85,148,85,85,85,]),'statement':([53,91,126,141,142,149,150,151,],[78,116,140,145,146,152,153,154,]),'expressionStmt':([53,91,126,141,142,149,150,151,],[79,79,79,79,79,79,79,79,]),'compoundStmt':([53,91,126,141,142,149,150,151,],[80,80,80,80,80,80,80,80,]),'selectionStmt':([53,91,126,141,142,149,150,151,],[81,81,81,81,81,81,81,81,]),'iterationStmt':([53,91,126,141,142,149,150,151,],[82,82,82,82,82,82,82,82,]),'returnStmt':([53,91,126,141,142,149,150,151,],[83,83,83,83,83,83,83,83,]),'breakStmt':([53,91,126,141,142,149,150,151,],[84,84,84,84,84,84,84,84,]),'args':([75,],[105,]),'argList':([75,],[106,]),'localDeclarations':([87,],[111,]),'statementList':([111,],[126,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarationList','program',1,'p_program','parser.py',10),
  ('declarationList -> declarationList declaration','declarationList',2,'p_declaration_list','parser.py',15),
  ('declarationList -> declaration','declarationList',1,'p_declaration_list','parser.py',16),
  ('declaration -> varDeclaration','declaration',1,'p_declaration','parser.py',21),
  ('declaration -> funDeclaration','declaration',1,'p_declaration','parser.py',22),
  ('declaration -> comment','declaration',1,'p_declaration','parser.py',23),
  ('comment -> BLOCKCOMMENT','comment',1,'p_comment','parser.py',29),
  ('varDeclaration -> typeSpecifier varDeclList SEMMICOLON','varDeclaration',3,'p_var_declaration','parser.py',35),
  ('varDeclList -> varDeclList COMMA varDecInitialize','varDeclList',3,'p_var_dec_list','parser.py',41),
  ('varDeclList -> varDecInitialize','varDeclList',1,'p_var_dec_list','parser.py',42),
  ('varDecInitialize -> varDeclId','varDecInitialize',1,'p_var_dec_initialize','parser.py',47),
  ('varDecInitialize -> varDeclId ASSIGMENT simpleExpression','varDecInitialize',3,'p_var_dec_initialize','parser.py',48),
  ('varDeclId -> IDENTIFIER','varDeclId',1,'p_var_dec_id','parser.py',53),
  ('varDeclId -> IDENTIFIER LBRACKET INTNUMBER RBRACKET','varDeclId',4,'p_array_var_dec_id','parser.py',58),
  ('typeSpecifier -> INT','typeSpecifier',1,'p_type_specifer','parser.py',63),
  ('typeSpecifier -> FLOAT','typeSpecifier',1,'p_type_specifer','parser.py',64),
  ('typeSpecifier -> CHAR','typeSpecifier',1,'p_type_specifer','parser.py',65),
  ('typeSpecifier -> BOOL','typeSpecifier',1,'p_type_specifer','parser.py',66),
  ('typeSpecifier -> VOID','typeSpecifier',1,'p_type_specifer','parser.py',67),
  ('funDeclaration -> typeSpecifier IDENTIFIER LPAREN params RPAREN statement','funDeclaration',6,'p_fun_declaration','parser.py',72),
  ('params -> paramList','params',1,'p_params','parser.py',78),
  ('params -> empty','params',1,'p_params','parser.py',79),
  ('paramList -> paramList SEMMICOLON paramTypeList','paramList',3,'p_param_list','parser.py',85),
  ('paramList -> paramTypeList','paramList',1,'p_param_list','parser.py',86),
  ('paramTypeList -> typeSpecifier paramIdList','paramTypeList',2,'p_param_type_list','parser.py',92),
  ('paramIdList -> paramIdList COMMA paramId','paramIdList',3,'p_param_id_list','parser.py',97),
  ('paramIdList -> paramId','paramIdList',1,'p_param_id_list','parser.py',98),
  ('paramId -> IDENTIFIER','paramId',1,'p_param_id','parser.py',103),
  ('paramId -> IDENTIFIER LBRACKET RBRACKET','paramId',3,'p_array_param_id','parser.py',108),
  ('compoundStmt -> LBRACE localDeclarations statementList RBRACE','compoundStmt',4,'p_compound_stmt','parser.py',113),
  ('localDeclarations -> localDeclarations varDeclaration','localDeclarations',2,'p_local_declarations','parser.py',118),
  ('localDeclarations -> empty','localDeclarations',1,'p_local_declarations','parser.py',119),
  ('statementList -> statementList statement','statementList',2,'p_statement_list','parser.py',124),
  ('statementList -> empty','statementList',1,'p_statement_list','parser.py',125),
  ('statementList -> comment','statementList',1,'p_statement_list','parser.py',126),
  ('statement -> expressionStmt','statement',1,'p_statement','parser.py',131),
  ('statement -> compoundStmt','statement',1,'p_statement','parser.py',132),
  ('statement -> selectionStmt','statement',1,'p_statement','parser.py',133),
  ('statement -> iterationStmt','statement',1,'p_statement','parser.py',134),
  ('statement -> returnStmt','statement',1,'p_statement','parser.py',135),
  ('statement -> breakStmt','statement',1,'p_statement','parser.py',136),
  ('expressionStmt -> expression SEMMICOLON','expressionStmt',2,'p_expression_stmt','parser.py',141),
  ('expressionStmt -> SEMMICOLON','expressionStmt',1,'p_expression_stmt','parser.py',142),
  ('selectionStmt -> IF LPAREN expression RPAREN statement','selectionStmt',5,'p_selection_statement','parser.py',147),
  ('selectionStmt -> IF LPAREN expression RPAREN statement ELSE statement','selectionStmt',7,'p_selection_statement_else','parser.py',152),
  ('iterationStmt -> WHILE LPAREN expression RPAREN statement','iterationStmt',5,'p_iteration_statement','parser.py',158),
  ('iterationStmt -> FOR LPAREN IDENTIFIER IN IDENTIFIER RPAREN statement','iterationStmt',7,'p_iteration_for_statement','parser.py',163),
  ('iterationStmt -> DO statement WHILE LPAREN expression RPAREN statement','iterationStmt',7,'p_iteration_do_while_statement','parser.py',168),
  ('returnStmt -> RETURN SEMMICOLON','returnStmt',2,'p_return_statement','parser.py',173),
  ('returnStmt -> RETURN expression SEMMICOLON','returnStmt',3,'p_return_statement','parser.py',174),
  ('breakStmt -> BREAK SEMMICOLON','breakStmt',2,'p_break_stmt','parser.py',179),
  ('expression -> IDENTIFIER ASSIGMENT expression','expression',3,'p_expression','parser.py',184),
  ('expression -> IDENTIFIER PLUS ASSIGMENT expression','expression',4,'p_expression','parser.py',185),
  ('expression -> IDENTIFIER MINUS ASSIGMENT expression','expression',4,'p_expression','parser.py',186),
  ('expression -> simpleExpression','expression',1,'p_expression','parser.py',187),
  ('var -> IDENTIFIER','var',1,'p_var','parser.py',192),
  ('var -> IDENTIFIER LBRACKET expression RBRACKET','var',4,'p_var','parser.py',193),
  ('simpleExpression -> simpleExpression OR orExpression','simpleExpression',3,'p_simple_expression','parser.py',198),
  ('simpleExpression -> orExpression','simpleExpression',1,'p_simple_expression','parser.py',199),
  ('orExpression -> orExpression AND unaryRelExpression','orExpression',3,'p_or_expression','parser.py',204),
  ('orExpression -> unaryRelExpression','orExpression',1,'p_or_expression','parser.py',205),
  ('unaryRelExpression -> NOT unaryRelExpression','unaryRelExpression',2,'p_unary_rel_expression','parser.py',210),
  ('unaryRelExpression -> relExpression','unaryRelExpression',1,'p_unary_rel_expression','parser.py',211),
  ('relExpression -> addExpression relop addExpression','relExpression',3,'p_rel_expression','parser.py',216),
  ('relExpression -> addExpression','relExpression',1,'p_rel_expression','parser.py',217),
  ('relop -> GREATER','relop',1,'p_greater_relop','parser.py',222),
  ('relop -> LOWER','relop',1,'p_lower_relop','parser.py',227),
  ('relop -> EQUALS','relop',1,'p_equals_relop','parser.py',232),
  ('relop -> GREATERTHAN','relop',1,'p_gratherthan_relop','parser.py',237),
  ('relop -> LOWERTHAN','relop',1,'p_lowerthan_relop','parser.py',242),
  ('addExpression -> addExpression addop term','addExpression',3,'p_add_expression','parser.py',248),
  ('addExpression -> term','addExpression',1,'p_add_expression','parser.py',249),
  ('addop -> PLUS','addop',1,'p_addop_plus','parser.py',254),
  ('addop -> MINUS','addop',1,'p_addop_minus','parser.py',259),
  ('term -> term mulop unaryExpression','term',3,'p_term','parser.py',264),
  ('term -> unaryExpression','term',1,'p_term','parser.py',265),
  ('mulop -> TIMES','mulop',1,'p_mulop_times','parser.py',270),
  ('mulop -> DIVIDE','mulop',1,'p_mulop_divide','parser.py',275),
  ('mulop -> MOD','mulop',1,'p_mulop_mod','parser.py',280),
  ('unaryExpression -> unaryExpression','unaryExpression',1,'p_unary_expression','parser.py',285),
  ('unaryExpression -> factor','unaryExpression',1,'p_unary_expression','parser.py',286),
  ('factor -> LBRACKET expression RBRACKET','factor',3,'p_factor','parser.py',291),
  ('factor -> var','factor',1,'p_factor','parser.py',292),
  ('factor -> call','factor',1,'p_factor','parser.py',293),
  ('factor -> constant','factor',1,'p_factor','parser.py',294),
  ('constant -> INTNUMBER','constant',1,'p_constant_int','parser.py',299),
  ('constant -> FLOATNUMBER','constant',1,'p_constant_float','parser.py',304),
  ('constant -> FALSE','constant',1,'p_constant_false','parser.py',309),
  ('constant -> TRUE','constant',1,'p_constant_true','parser.py',314),
  ('call -> IDENTIFIER LBRACKET args RBRACKET','call',4,'p_call','parser.py',319),
  ('args -> argList','args',1,'p_args','parser.py',324),
  ('args -> empty','args',1,'p_args','parser.py',325),
  ('argList -> argList COMMA expression','argList',3,'p_arg_list','parser.py',330),
  ('argList -> expression','argList',1,'p_arg_list','parser.py',331),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',336),
]
